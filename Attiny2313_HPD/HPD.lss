
HPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001d0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000075  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000232  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014d  00000000  00000000  00000497  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029f  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000058  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__vector_5>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a4 36       	cpi	r26, 0x64	; 100
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	57 d0       	rcall	.+174    	; 0xee <main>
  40:	8b c0       	rjmp	.+278    	; 0x158 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_5>:
#define AC_ON_DURATION 10
//number of counts since the last movement detection
volatile uint16_t mACONCounter = 0;


ISR(TIMER1_OVF_vect){
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	9f 93       	push	r25
	mTimerCounter++;
  52:	80 91 60 00 	lds	r24, 0x0060
  56:	90 91 61 00 	lds	r25, 0x0061
  5a:	01 96       	adiw	r24, 0x01	; 1
  5c:	90 93 61 00 	sts	0x0061, r25
  60:	80 93 60 00 	sts	0x0060, r24
	mACONCounter++;
  64:	80 91 62 00 	lds	r24, 0x0062
  68:	90 91 63 00 	lds	r25, 0x0063
  6c:	01 96       	adiw	r24, 0x01	; 1
  6e:	90 93 63 00 	sts	0x0063, r25
  72:	80 93 62 00 	sts	0x0062, r24
	
	//long time since movement, turn off
	if (mACONCounter > AC_ON_DURATION){
  76:	80 91 62 00 	lds	r24, 0x0062
  7a:	90 91 63 00 	lds	r25, 0x0063
  7e:	0b 97       	sbiw	r24, 0x0b	; 11
  80:	28 f0       	brcs	.+10     	; 0x8c <__vector_5+0x48>
			//AC is off
			mACONCounter = 0;
  82:	10 92 63 00 	sts	0x0063, r1
  86:	10 92 62 00 	sts	0x0062, r1
			
			//make AC off
			PORTD = 0x00;	
  8a:	12 ba       	out	0x12, r1	; 18
	}

	if (mTimerCounter >= TIMER_DIVIDER){
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	90 91 61 00 	lds	r25, 0x0061
  94:	02 97       	sbiw	r24, 0x02	; 2
  96:	98 f0       	brcs	.+38     	; 0xbe <__vector_5+0x7a>
		//first thing, reset
		mTimerCounter = 0;
  98:	10 92 61 00 	sts	0x0061, r1
  9c:	10 92 60 00 	sts	0x0060, r1
		//then do the interrupt job
		
		//read input on PB7, and light or stop D port
		unsigned char mPinDIn;
		mPinDIn = PIND;
		if (!(mPinDIn & 0x01)){
  a0:	80 99       	sbic	0x10, 0	; 16
  a2:	07 c0       	rjmp	.+14     	; 0xb2 <__vector_5+0x6e>
			//movement detected!
			
			//make the B7 pin on (light led)
			PORTB |= 0x80;
  a4:	c7 9a       	sbi	0x18, 7	; 24
			
			//reset AC-ON counter to 0
			mACONCounter = 0;
  a6:	10 92 63 00 	sts	0x0063, r1
  aa:	10 92 62 00 	sts	0x0062, r1
			
			//make AC on D4
			PORTD |= 0x10;
  ae:	94 9a       	sbi	0x12, 4	; 18
  b0:	06 c0       	rjmp	.+12     	; 0xbe <__vector_5+0x7a>
		}
		else {
			//movement off

			//make the B7 pin off (stop led)
			PORTB &= 0x7F;
  b2:	c7 98       	cbi	0x18, 7	; 24

			//AC is off
			mACONCounter = 0;
  b4:	10 92 63 00 	sts	0x0063, r1
  b8:	10 92 62 00 	sts	0x0062, r1
			
			//make AC off D4
			PORTD = 0x00;
  bc:	12 ba       	out	0x12, r1	; 18
		}
	}
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <init_timer1_OVF>:

//inits timer 1 to do interrupt on overflow (calls ISR(TIMER1_OVF_vect))
void init_timer1_OVF() {
	//timer 1 prescaler : makes clock / 64  -> tick every 1/4 sec roughly
    TCCR1B=0x03;
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	8e bd       	out	0x2e, r24	; 46
	//trigger the interrupt vector TIMER1_OVF_vect when timer 1 is overflow
    TIMSK = 0x80;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	89 bf       	out	0x39, r24	; 57

	//sets the interruptions to enabled
	sei();
  d4:	78 94       	sei
}
  d6:	08 95       	ret

000000d8 <init_timer0_PWM>:


//Inits timer 0 to do PWM on pin B2
void init_timer0_PWM() {
	/* Set Fast PWM mode. */
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
  d8:	80 b7       	in	r24, 0x30	; 48
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	80 bf       	out	0x30, r24	; 48
	/* Clear 0C0A on compare. */
	TCCR0A |= (1<<COM0A1);
  de:	80 b7       	in	r24, 0x30	; 48
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 bf       	out	0x30, r24	; 48
	/* Start timer, no prescaling. */
	TCCR0B |= (1<<CS00);
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	83 bf       	out	0x33, r24	; 51
	/* Duty cycle 0% */
	OCR0A = 0;
  ea:	16 be       	out	0x36, r1	; 54
}
  ec:	08 95       	ret

000000ee <main>:
//
int main(void) {

	//factory settings is to divide internal clock 8MHz by 8.
	//don't, and just run at 8 MHz (set the clock divider to 1 so no effect)
	CLKPR = (1<<CLKPCE);
  ee:	90 e8       	ldi	r25, 0x80	; 128
  f0:	96 bd       	out	0x26, r25	; 38
	CLKPR = 0; // Divide by 1 
  f2:	16 bc       	out	0x26, r1	; 38

	//ports of bank D goes Mixed : PD0 in (movement detected on low), others out
	DDRD = 0xFE;
  f4:	8e ef       	ldi	r24, 0xFE	; 254
  f6:	81 bb       	out	0x11, r24	; 17

	//all ports of bank B goes output PB6~0 is output
	DDRB = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	87 bb       	out	0x17, r24	; 23

	//will be used to re-divide the TIMER1 (too fast)
	mTimerCounter = 0;
  fc:	10 92 61 00 	sts	0x0061, r1
 100:	10 92 60 00 	sts	0x0060, r1


//Inits timer 0 to do PWM on pin B2
void init_timer0_PWM() {
	/* Set Fast PWM mode. */
	TCCR0A |= (1<<WGM00) | (1<<WGM01);
 104:	80 b7       	in	r24, 0x30	; 48
 106:	83 60       	ori	r24, 0x03	; 3
 108:	80 bf       	out	0x30, r24	; 48
	/* Clear 0C0A on compare. */
	TCCR0A |= (1<<COM0A1);
 10a:	80 b7       	in	r24, 0x30	; 48
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 bf       	out	0x30, r24	; 48
	/* Start timer, no prescaling. */
	TCCR0B |= (1<<CS00);
 110:	83 b7       	in	r24, 0x33	; 51
 112:	81 60       	ori	r24, 0x01	; 1
 114:	83 bf       	out	0x33, r24	; 51
	/* Duty cycle 0% */
	OCR0A = 0;
 116:	16 be       	out	0x36, r1	; 54
}

//inits timer 1 to do interrupt on overflow (calls ISR(TIMER1_OVF_vect))
void init_timer1_OVF() {
	//timer 1 prescaler : makes clock / 64  -> tick every 1/4 sec roughly
    TCCR1B=0x03;
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	8e bd       	out	0x2e, r24	; 46
	//trigger the interrupt vector TIMER1_OVF_vect when timer 1 is overflow
    TIMSK = 0x80;
 11c:	99 bf       	out	0x39, r25	; 57

	//sets the interruptions to enabled
	sei();
 11e:	78 94       	sei
 120:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 122:	40 e2       	ldi	r20, 0x20	; 32
 124:	5e e4       	ldi	r21, 0x4E	; 78
	while (1){

		//pulse led
		unsigned char i ;
		for(i=0; i < 255; i++) {
			OCR0A = i;
 126:	68 ec       	ldi	r22, 0xC8	; 200
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	05 c0       	rjmp	.+10     	; 0x136 <main+0x48>
 12c:	26 bf       	out	0x36, r18	; 54
 12e:	ca 01       	movw	r24, r20
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x42>
	
	while (1){

		//pulse led
		unsigned char i ;
		for(i=0; i < 255; i++) {
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	2f 3f       	cpi	r18, 0xFF	; 255
 138:	c9 f7       	brne	.-14     	; 0x12c <main+0x3e>
			OCR0A = i;
			_delay_ms(10);
		}

		for(i=255; i > 0; i--) {
			OCR0A = i;
 13a:	26 bf       	out	0x36, r18	; 54
 13c:	ca 01       	movw	r24, r20
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x50>
		for(i=0; i < 255; i++) {
			OCR0A = i;
			_delay_ms(10);
		}

		for(i=255; i > 0; i--) {
 142:	21 50       	subi	r18, 0x01	; 1
 144:	d1 f7       	brne	.-12     	; 0x13a <main+0x4c>
			OCR0A = i;
			_delay_ms(10);
		}		
		OCR0A = 0;
 146:	16 be       	out	0x36, r1	; 54
 148:	84 ef       	ldi	r24, 0xF4	; 244
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	fb 01       	movw	r30, r22
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	d9 f7       	brne	.-10     	; 0x14c <main+0x5e>
 156:	ea cf       	rjmp	.-44     	; 0x12c <main+0x3e>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
