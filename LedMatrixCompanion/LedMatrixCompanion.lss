
LedMatrixCompanion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000006fa  0000078e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800114  00800114  000007a2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000160  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000260  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000517  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000289  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001c9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	29 c2       	rjmp	.+1106   	; 0x478 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ef       	ldi	r30, 0xFA	; 250
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a4 e1       	ldi	r26, 0x14	; 20
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 36       	cpi	r26, 0x60	; 96
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	c3 d1       	rcall	.+902    	; 0x3ee <main>
  68:	46 c3       	rjmp	.+1676   	; 0x6f6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <digitalWrite>:
////////////////////////////////

void init_usart(unsigned long);


void digitalWrite(unsigned char pPin, unsigned char pValue){
  6c:	38 2f       	mov	r19, r24
	if (pValue == 1) {	
  6e:	61 30       	cpi	r22, 0x01	; 1
  70:	d1 f4       	brne	.+52     	; 0xa6 <digitalWrite+0x3a>
		if (pPin < 8){
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	58 f4       	brcc	.+22     	; 0x8c <digitalWrite+0x20>
			PORTB = PORTB ^ (1 << pPin);
  76:	25 b1       	in	r18, 0x05	; 5
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	02 c0       	rjmp	.+4      	; 0x82 <digitalWrite+0x16>
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	3a 95       	dec	r19
  84:	e2 f7       	brpl	.-8      	; 0x7e <digitalWrite+0x12>
  86:	28 27       	eor	r18, r24
  88:	25 b9       	out	0x05, r18	; 5
  8a:	08 95       	ret
		}
		else
		if (pPin < 16){
  8c:	80 31       	cpi	r24, 0x10	; 16
  8e:	30 f5       	brcc	.+76     	; 0xdc <digitalWrite+0x70>
			PORTC = PORTC ^ (1 << pPin);
  90:	28 b1       	in	r18, 0x08	; 8
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <digitalWrite+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	3a 95       	dec	r19
  9e:	e2 f7       	brpl	.-8      	; 0x98 <digitalWrite+0x2c>
  a0:	28 27       	eor	r18, r24
  a2:	28 b9       	out	0x08, r18	; 8
  a4:	08 95       	ret
		}
	}
	else {
		if (pPin < 8){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	60 f4       	brcc	.+24     	; 0xc2 <digitalWrite+0x56>
			PORTB = PORTB & ~(1 << pPin);
  aa:	25 b1       	in	r18, 0x05	; 5
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWrite+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	3a 95       	dec	r19
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWrite+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	85 b9       	out	0x05, r24	; 5
  c0:	08 95       	ret
		}
		else
		if (pPin < 16){
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	58 f4       	brcc	.+22     	; 0xdc <digitalWrite+0x70>
			PORTC = PORTC & ~(1 << pPin);
  c6:	28 b1       	in	r18, 0x08	; 8
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <digitalWrite+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	3a 95       	dec	r19
  d4:	e2 f7       	brpl	.-8      	; 0xce <digitalWrite+0x62>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	88 b9       	out	0x08, r24	; 8
  dc:	08 95       	ret

000000de <resetMatrixBuffer>:
		}	
	}
}


void resetMatrixBuffer()   {                
  de:	e8 e5       	ldi	r30, 0x58	; 88
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  for(unsigned char i =0; i < MATRIXBUFFLEN; i++){
    mBuffer[i] = 0;
  e2:	11 92       	st	Z+, r1
	}
}


void resetMatrixBuffer()   {                
  for(unsigned char i =0; i < MATRIXBUFFLEN; i++){
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	e0 36       	cpi	r30, 0x60	; 96
  e8:	f8 07       	cpc	r31, r24
  ea:	d9 f7       	brne	.-10     	; 0xe2 <resetMatrixBuffer+0x4>
    mBuffer[i] = 0;
  }  
}
  ec:	08 95       	ret

000000ee <scanLines>:
}

unsigned char mPos = 0;
void scanLines(){
  unsigned char l,c;
  l = mPos / 8;
  ee:	80 91 16 01 	lds	r24, 0x0116
  c = mPos % 8;  
  unsigned char b = mBuffer[c];
  f2:	38 2f       	mov	r19, r24
  f4:	37 70       	andi	r19, 0x07	; 7
  b = b ^ _BV(l);
  f6:	28 2f       	mov	r18, r24
  f8:	26 95       	lsr	r18
  fa:	26 95       	lsr	r18
  fc:	26 95       	lsr	r18
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <scanLines+0x1a>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	2a 95       	dec	r18
 10a:	e2 f7       	brpl	.-8      	; 0x104 <scanLines+0x16>
 10c:	e8 e5       	ldi	r30, 0x58	; 88
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	e3 0f       	add	r30, r19
 112:	f1 1d       	adc	r31, r1
 114:	20 81       	ld	r18, Z
 116:	24 27       	eor	r18, r20
  mBuffer[c] = b;
 118:	20 83       	st	Z, r18

  mPos = (mPos + 1) % 64;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 73       	andi	r24, 0x3F	; 63
 120:	90 70       	andi	r25, 0x00	; 0
 122:	80 93 16 01 	sts	0x0116, r24
}
 126:	08 95       	ret

00000128 <loop>:

void loop()                     
{
	//change the drawing
	//randomOnOff();
	scanLines();
 128:	e2 df       	rcall	.-60     	; 0xee <scanLines>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0

	//draw the in memory image
	for (unsigned char c = 0; c < MATRIXBUFFLEN; c++){
		PORTD = mBuffer[c];
		PORTB = ~_BV(c);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0

		//x is the 2 first bit of the PORTD data. Don't use port D to free the pins 0&1 TXand RX of the serial communication.
		//y is the last part of the pins to display. Pins A0 & A1 (D14 & D15)
		//x is 0b------XX, y is 0b------YY we want to make 0b0000XXYY
		unsigned char x = (mBuffer[c] & 0x03);
		unsigned char y = (c >= 6 ? ~_BV(c - 6) : 0xFF);
 132:	af ef       	ldi	r26, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	60 ea       	ldi	r22, 0xA0	; 160
 136:	7f e0       	ldi	r23, 0x0F	; 15
	//randomOnOff();
	scanLines();

	//draw the in memory image
	for (unsigned char c = 0; c < MATRIXBUFFLEN; c++){
		PORTD = mBuffer[c];
 138:	f9 01       	movw	r30, r18
 13a:	e8 5a       	subi	r30, 0xA8	; 168
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	e0 81       	ld	r30, Z
 140:	eb b9       	out	0x0b, r30	; 11
		PORTB = ~_BV(c);
 142:	ca 01       	movw	r24, r20
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <loop+0x24>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <loop+0x20>
 150:	80 95       	com	r24
 152:	85 b9       	out	0x05, r24	; 5

		//x is the 2 first bit of the PORTD data. Don't use port D to free the pins 0&1 TXand RX of the serial communication.
		//y is the last part of the pins to display. Pins A0 & A1 (D14 & D15)
		//x is 0b------XX, y is 0b------YY we want to make 0b0000XXYY
		unsigned char x = (mBuffer[c] & 0x03);
		unsigned char y = (c >= 6 ? ~_BV(c - 6) : 0xFF);
 154:	26 30       	cpi	r18, 0x06	; 6
 156:	10 f4       	brcc	.+4      	; 0x15c <loop+0x34>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	0c c0       	rjmp	.+24     	; 0x174 <loop+0x4c>
 15c:	26 50       	subi	r18, 0x06	; 6
 15e:	30 40       	sbci	r19, 0x00	; 0
 160:	ca 01       	movw	r24, r20
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <loop+0x42>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <loop+0x3e>
 16e:	2a 5f       	subi	r18, 0xFA	; 250
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	80 95       	com	r24
		PORTC = 0x0F & ( (x << 2) | (y & 0x03)); 
 174:	83 70       	andi	r24, 0x03	; 3
 176:	e3 70       	andi	r30, 0x03	; 3
 178:	ee 0f       	add	r30, r30
 17a:	ee 0f       	add	r30, r30
 17c:	e8 2b       	or	r30, r24
 17e:	e8 b9       	out	0x08, r30	; 8
 180:	cb 01       	movw	r24, r22
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <loop+0x5a>
		
		//stay displayed to allow POV
		_delay_us(1000);
		PORTD = 0;
 186:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0xFF;
 188:	a5 b9       	out	0x05, r26	; 5
		PORTC = 0xFF;
 18a:	a8 b9       	out	0x08, r26	; 8
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
	//change the drawing
	//randomOnOff();
	scanLines();

	//draw the in memory image
	for (unsigned char c = 0; c < MATRIXBUFFLEN; c++){
 190:	28 30       	cpi	r18, 0x08	; 8
 192:	31 05       	cpc	r19, r1
 194:	89 f6       	brne	.-94     	; 0x138 <loop+0x10>
		PORTD = 0;
		PORTB = 0xFF;
		PORTC = 0xFF;
	}

}
 196:	08 95       	ret

00000198 <HexToInt>:

unsigned char HEX2DEC[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

unsigned char HexToInt (unsigned char pHigh, unsigned char pLow){
 198:	98 2f       	mov	r25, r24
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char vR = 0;

	for (int i =0; i < 16; i++){
		if (HEX2DEC[i] == pHigh){
 19e:	f9 01       	movw	r30, r18
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	80 81       	ld	r24, Z
 1a6:	89 17       	cp	r24, r25
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <HexToInt+0x1a>
			vR = i << 4;
 1aa:	e2 2f       	mov	r30, r18
 1ac:	e2 95       	swap	r30
 1ae:	e0 7f       	andi	r30, 0xF0	; 240
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <HexToInt+0x26>
unsigned char HEX2DEC[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

unsigned char HexToInt (unsigned char pHigh, unsigned char pLow){
	unsigned char vR = 0;

	for (int i =0; i < 16; i++){
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	20 31       	cpi	r18, 0x10	; 16
 1b8:	31 05       	cpc	r19, r1
 1ba:	89 f7       	brne	.-30     	; 0x19e <HexToInt+0x6>
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b1 e0       	ldi	r27, 0x01	; 1
			break;
		}
	}

	for (int i =0; i < 16; i++){
		if (HEX2DEC[i] == pLow){
 1c2:	8c 91       	ld	r24, X
 1c4:	86 17       	cp	r24, r22
 1c6:	11 f4       	brne	.+4      	; 0x1cc <HexToInt+0x34>
			vR = vR + pLow;
 1c8:	e6 0f       	add	r30, r22
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <HexToInt+0x3e>
			break;
 1cc:	11 96       	adiw	r26, 0x01	; 1
			vR = i << 4;
			break;
		}
	}

	for (int i =0; i < 16; i++){
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	a0 31       	cpi	r26, 0x10	; 16
 1d2:	b8 07       	cpc	r27, r24
 1d4:	b1 f7       	brne	.-20     	; 0x1c2 <HexToInt+0x2a>
			break;
		}
	}
	
	return vR;
}
 1d6:	8e 2f       	mov	r24, r30
 1d8:	08 95       	ret

000001da <ReadSerialMatrixData>:
	sei();
}

unsigned char data_in_buffer(void)
{
	if(rx_buffer_head == rx_buffer_tail)
 1da:	90 91 15 01 	lds	r25, 0x0115
 1de:	80 91 14 01 	lds	r24, 0x0114
 1e2:	98 17       	cp	r25, r24
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <ReadSerialMatrixData+0xe>
 1e6:	68 c0       	rjmp	.+208    	; 0x2b8 <ReadSerialMatrixData+0xde>
	}
}

unsigned char read_from_buffer(void)
{
	while(rx_buffer_head == rx_buffer_tail) {}
 1e8:	90 91 15 01 	lds	r25, 0x0115
 1ec:	80 91 14 01 	lds	r24, 0x0114
 1f0:	98 17       	cp	r25, r24
 1f2:	d1 f3       	breq	.-12     	; 0x1e8 <ReadSerialMatrixData+0xe>
	rx_buffer_tail = (rx_buffer_tail + 1) & rx_buffer_mask;
 1f4:	80 91 14 01 	lds	r24, 0x0114
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	8f 73       	andi	r24, 0x3F	; 63
 1fc:	80 93 14 01 	sts	0x0114, r24
	return rx_buffer[rx_buffer_tail];
 200:	e0 91 14 01 	lds	r30, 0x0114
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e9 5e       	subi	r30, 0xE9	; 233
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	e0 81       	ld	r30, Z
void ReadSerialMatrixData(){
	if(data_in_buffer() != 0)
	{
		unsigned char vCharacter = read_from_buffer();
			
		if (vCharacter == 'R'){
 20c:	e2 35       	cpi	r30, 0x52	; 82
 20e:	41 f4       	brne	.+16     	; 0x220 <ReadSerialMatrixData+0x46>
 210:	e8 e5       	ldi	r30, 0x58	; 88
 212:	f1 e0       	ldi	r31, 0x01	; 1
}


void resetMatrixBuffer()   {                
  for(unsigned char i =0; i < MATRIXBUFFLEN; i++){
    mBuffer[i] = 0;
 214:	11 92       	st	Z+, r1
	}
}


void resetMatrixBuffer()   {                
  for(unsigned char i =0; i < MATRIXBUFFLEN; i++){
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	e0 36       	cpi	r30, 0x60	; 96
 21a:	f8 07       	cpc	r31, r24
 21c:	d9 f7       	brne	.-10     	; 0x214 <ReadSerialMatrixData+0x3a>
 21e:	4c c0       	rjmp	.+152    	; 0x2b8 <ReadSerialMatrixData+0xde>
			
		if (vCharacter == 'R'){
			resetMatrixBuffer();
		}
		else {
			if (vCharacter >= '0' && vCharacter <= '7'){
 220:	6e 2f       	mov	r22, r30
 222:	60 53       	subi	r22, 0x30	; 48
 224:	68 30       	cpi	r22, 0x08	; 8
 226:	08 f0       	brcs	.+2      	; 0x22a <ReadSerialMatrixData+0x50>
 228:	47 c0       	rjmp	.+142    	; 0x2b8 <ReadSerialMatrixData+0xde>
	}
}

unsigned char read_from_buffer(void)
{
	while(rx_buffer_head == rx_buffer_tail) {}
 22a:	90 91 15 01 	lds	r25, 0x0115
 22e:	80 91 14 01 	lds	r24, 0x0114
 232:	98 17       	cp	r25, r24
 234:	d1 f3       	breq	.-12     	; 0x22a <ReadSerialMatrixData+0x50>
	rx_buffer_tail = (rx_buffer_tail + 1) & rx_buffer_mask;
 236:	80 91 14 01 	lds	r24, 0x0114
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	8f 73       	andi	r24, 0x3F	; 63
 23e:	80 93 14 01 	sts	0x0114, r24
	return rx_buffer[rx_buffer_tail];
 242:	e0 91 14 01 	lds	r30, 0x0114
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e9 5e       	subi	r30, 0xE9	; 233
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	50 81       	ld	r21, Z
	}
}

unsigned char read_from_buffer(void)
{
	while(rx_buffer_head == rx_buffer_tail) {}
 24e:	90 91 15 01 	lds	r25, 0x0115
 252:	80 91 14 01 	lds	r24, 0x0114
 256:	98 17       	cp	r25, r24
 258:	d1 f3       	breq	.-12     	; 0x24e <ReadSerialMatrixData+0x74>
	rx_buffer_tail = (rx_buffer_tail + 1) & rx_buffer_mask;
 25a:	80 91 14 01 	lds	r24, 0x0114
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	8f 73       	andi	r24, 0x3F	; 63
 262:	80 93 14 01 	sts	0x0114, r24
	return rx_buffer[rx_buffer_tail];
 266:	e0 91 14 01 	lds	r30, 0x0114
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e9 5e       	subi	r30, 0xE9	; 233
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	40 81       	ld	r20, Z
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0

unsigned char HexToInt (unsigned char pHigh, unsigned char pLow){
	unsigned char vR = 0;

	for (int i =0; i < 16; i++){
		if (HEX2DEC[i] == pHigh){
 276:	f9 01       	movw	r30, r18
 278:	e0 50       	subi	r30, 0x00	; 0
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	80 81       	ld	r24, Z
 27e:	85 17       	cp	r24, r21
 280:	21 f4       	brne	.+8      	; 0x28a <ReadSerialMatrixData+0xb0>
			vR = i << 4;
 282:	92 2f       	mov	r25, r18
 284:	92 95       	swap	r25
 286:	90 7f       	andi	r25, 0xF0	; 240
 288:	06 c0       	rjmp	.+12     	; 0x296 <ReadSerialMatrixData+0xbc>
unsigned char HEX2DEC[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

unsigned char HexToInt (unsigned char pHigh, unsigned char pLow){
	unsigned char vR = 0;

	for (int i =0; i < 16; i++){
 28a:	2f 5f       	subi	r18, 0xFF	; 255
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	20 31       	cpi	r18, 0x10	; 16
 290:	31 05       	cpc	r19, r1
 292:	89 f7       	brne	.-30     	; 0x276 <ReadSerialMatrixData+0x9c>
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	e0 e0       	ldi	r30, 0x00	; 0
 298:	f1 e0       	ldi	r31, 0x01	; 1
			break;
		}
	}

	for (int i =0; i < 16; i++){
		if (HEX2DEC[i] == pLow){
 29a:	80 81       	ld	r24, Z
 29c:	84 17       	cp	r24, r20
 29e:	11 f4       	brne	.+4      	; 0x2a4 <ReadSerialMatrixData+0xca>
			vR = vR + pLow;
 2a0:	94 0f       	add	r25, r20
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <ReadSerialMatrixData+0xd4>
 2a4:	31 96       	adiw	r30, 0x01	; 1
			vR = i << 4;
			break;
		}
	}

	for (int i =0; i < 16; i++){
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	e0 31       	cpi	r30, 0x10	; 16
 2aa:	f8 07       	cpc	r31, r24
 2ac:	b1 f7       	brne	.-20     	; 0x29a <ReadSerialMatrixData+0xc0>
			if (vCharacter >= '0' && vCharacter <= '7'){
				unsigned char vIndex = vCharacter - '0';
				unsigned char vHigh = read_from_buffer();
				unsigned char vLow = read_from_buffer();
				
				mBuffer[vIndex] = HexToInt(vHigh, vLow);
 2ae:	e6 2f       	mov	r30, r22
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	e8 5a       	subi	r30, 0xA8	; 168
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	90 83       	st	Z, r25
 2b8:	80 e4       	ldi	r24, 0x40	; 64
 2ba:	9c e9       	ldi	r25, 0x9C	; 156
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <ReadSerialMatrixData+0xe2>
			}
		}
	}
	_delay_ms(10);
		
}
 2c0:	08 95       	ret

000002c2 <init_usart>:

}


void init_usart (unsigned long baud)
{
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	6b 01       	movw	r12, r22
 2da:	7c 01       	movw	r14, r24
	unsigned long closest_match_2x_on;
	unsigned char off_2x_error;
	unsigned char on_2x_error;

	UBRR_2x_off = F_CPU/(16*baud) - 1;
	UBRR_2x_on = F_CPU/(8*baud) - 1;
 2dc:	9b 01       	movw	r18, r22
 2de:	ac 01       	movw	r20, r24
 2e0:	73 e0       	ldi	r23, 0x03	; 3
 2e2:	22 0f       	add	r18, r18
 2e4:	33 1f       	adc	r19, r19
 2e6:	44 1f       	adc	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	7a 95       	dec	r23
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <init_usart+0x20>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	74 e2       	ldi	r23, 0x24	; 36
 2f2:	84 ef       	ldi	r24, 0xF4	; 244
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	8b d1       	rcall	.+790    	; 0x60e <__udivmodsi4>
 2f8:	e9 01       	movw	r28, r18
 2fa:	59 01       	movw	r10, r18
 2fc:	08 94       	sec
 2fe:	a1 08       	sbc	r10, r1
 300:	b1 08       	sbc	r11, r1
	off_2x_error = 255*(closest_match_2x_off/baud - 1);
	if (off_2x_error <0) {off_2x_error *= (-1);}
	on_2x_error = 255*(closest_match_2x_on/baud -1);
	if (on_2x_error <0) {on_2x_error *= (-1);}

	if(baud > F_CPU / 16)
 302:	81 e4       	ldi	r24, 0x41	; 65
 304:	c8 16       	cp	r12, r24
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	d8 06       	cpc	r13, r24
 30a:	8f e0       	ldi	r24, 0x0F	; 15
 30c:	e8 06       	cpc	r14, r24
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	f8 06       	cpc	r15, r24
 312:	08 f0       	brcs	.+2      	; 0x316 <init_usart+0x54>
 314:	45 c0       	rjmp	.+138    	; 0x3a0 <init_usart+0xde>
	unsigned long closest_match_2x_off;
	unsigned long closest_match_2x_on;
	unsigned char off_2x_error;
	unsigned char on_2x_error;

	UBRR_2x_off = F_CPU/(16*baud) - 1;
 316:	a7 01       	movw	r20, r14
 318:	96 01       	movw	r18, r12
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	44 1f       	adc	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	6a 95       	dec	r22
 326:	d1 f7       	brne	.-12     	; 0x31c <init_usart+0x5a>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	74 e2       	ldi	r23, 0x24	; 36
 32c:	84 ef       	ldi	r24, 0xF4	; 244
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	6e d1       	rcall	.+732    	; 0x60e <__udivmodsi4>
 332:	49 01       	movw	r8, r18
		UBRR0L = 0xff & UBRR_2x_on;
		UBRR0H = 0xff & (UBRR_2x_on>>8);
		UCSR0A |= (1<<U2X0);
	} else {

		if (off_2x_error > on_2x_error)
 334:	94 e0       	ldi	r25, 0x04	; 4
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	9a 95       	dec	r25
 33c:	e1 f7       	brne	.-8      	; 0x336 <init_usart+0x74>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	74 e2       	ldi	r23, 0x24	; 36
 346:	84 ef       	ldi	r24, 0xF4	; 244
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	61 d1       	rcall	.+706    	; 0x60e <__udivmodsi4>
 34c:	ca 01       	movw	r24, r20
 34e:	b9 01       	movw	r22, r18
 350:	a7 01       	movw	r20, r14
 352:	96 01       	movw	r18, r12
 354:	5c d1       	rcall	.+696    	; 0x60e <__udivmodsi4>
 356:	ca 01       	movw	r24, r20
 358:	b9 01       	movw	r22, r18
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	36 d1       	rcall	.+620    	; 0x5d0 <__mulsi3>
 364:	16 2f       	mov	r17, r22
 366:	1f 5f       	subi	r17, 0xFF	; 255
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	cc 0f       	add	r28, r28
 36c:	dd 1f       	adc	r29, r29
 36e:	8a 95       	dec	r24
 370:	e1 f7       	brne	.-8      	; 0x36a <init_usart+0xa8>
 372:	9e 01       	movw	r18, r28
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	74 e2       	ldi	r23, 0x24	; 36
 37c:	84 ef       	ldi	r24, 0xF4	; 244
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	46 d1       	rcall	.+652    	; 0x60e <__udivmodsi4>
 382:	ca 01       	movw	r24, r20
 384:	b9 01       	movw	r22, r18
 386:	a7 01       	movw	r20, r14
 388:	96 01       	movw	r18, r12
 38a:	41 d1       	rcall	.+642    	; 0x60e <__udivmodsi4>
 38c:	ca 01       	movw	r24, r20
 38e:	b9 01       	movw	r22, r18
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	1b d1       	rcall	.+566    	; 0x5d0 <__mulsi3>
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	61 17       	cp	r22, r17
 39e:	40 f4       	brcc	.+16     	; 0x3b0 <init_usart+0xee>
		{
			UBRR0L = 0xff & UBRR_2x_on;
 3a0:	a0 92 c4 00 	sts	0x00C4, r10
			UBRR0H = 0xff & (UBRR_2x_on>>8);
 3a4:	b0 92 c5 00 	sts	0x00C5, r11
			UCSR0A |= (1<<U2X0);
 3a8:	80 91 c0 00 	lds	r24, 0x00C0
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <init_usart+0x100>
	unsigned long closest_match_2x_off;
	unsigned long closest_match_2x_on;
	unsigned char off_2x_error;
	unsigned char on_2x_error;

	UBRR_2x_off = F_CPU/(16*baud) - 1;
 3b0:	c4 01       	movw	r24, r8
 3b2:	01 97       	sbiw	r24, 0x01	; 1
		{
			UBRR0L = 0xff & UBRR_2x_on;
			UBRR0H = 0xff & (UBRR_2x_on>>8);
			UCSR0A |= (1<<U2X0);
		} else {
			UBRR0L = 0xff & UBRR_2x_off;
 3b4:	80 93 c4 00 	sts	0x00C4, r24
			UBRR0H = 0xff & (UBRR_2x_off>>8);
 3b8:	90 93 c5 00 	sts	0x00C5, r25
			UCSR0A &= ~(1<<U2X0);
 3bc:	80 91 c0 00 	lds	r24, 0x00C0
 3c0:	8d 7f       	andi	r24, 0xFD	; 253
 3c2:	80 93 c0 00 	sts	0x00C0, r24
		}
	}

	UCSR0B = (0<<RXCIE0) |
 3c6:	88 e1       	ldi	r24, 0x18	; 24
 3c8:	80 93 c1 00 	sts	0x00C1, r24
	(0<<UDRIE0) |
	(1<<RXEN0) |
	(1<<TXEN0) |
	(0<<UCSZ02);

	UCSR0A = (0<<U2X0) |
 3cc:	10 92 c0 00 	sts	0x00C0, r1
	(0<<MPCM0) ;

	UCSR0C = (0<<UMSEL01) | (0<<UMSEL00) |
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	80 93 c2 00 	sts	0x00C2, r24
	(0<<UPM01) | (0<<UPM00) |
	(0<<USBS0) |
	(1<<UCSZ01) | (1<<UCSZ00) |
	(0<<UCPOL0) ;
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	bf 90       	pop	r11
 3e6:	af 90       	pop	r10
 3e8:	9f 90       	pop	r9
 3ea:	8f 90       	pop	r8
 3ec:	08 95       	ret

000003ee <main>:
}

//
// main function
//
int main(void) {
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
	//all ports go output 
	//for the matrix
	DDRB = 0xFF;
 3f4:	1f ef       	ldi	r17, 0xFF	; 255
 3f6:	14 b9       	out	0x04, r17	; 4
	DDRC = 0xFF;
 3f8:	17 b9       	out	0x07, r17	; 7
	DDRD = 0xFF;
 3fa:	1a b9       	out	0x0a, r17	; 10
	
	//init the serial port
	init_usart(9600);
 3fc:	60 e8       	ldi	r22, 0x80	; 128
 3fe:	75 e2       	ldi	r23, 0x25	; 37
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	5e df       	rcall	.-324    	; 0x2c2 <init_usart>
	DDRB = 0xff;
 406:	14 b9       	out	0x04, r17	; 4

//////////////////////////////
//		Buffer Stuff
void init_usart_rx_buffer(void)
{
	UCSR0B |= (1<<RXCIE0);
 408:	80 91 c1 00 	lds	r24, 0x00C1
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	80 93 c1 00 	sts	0x00C1, r24
	sei();
 412:	78 94       	sei
 414:	c0 e4       	ldi	r28, 0x40	; 64
 416:	dc e9       	ldi	r29, 0x9C	; 156
}

unsigned char data_in_buffer(void)
{
	if(rx_buffer_head == rx_buffer_tail)
 418:	90 91 15 01 	lds	r25, 0x0115
 41c:	80 91 14 01 	lds	r24, 0x0114
 420:	98 17       	cp	r25, r24
 422:	29 f4       	brne	.+10     	; 0x42e <main+0x40>
 424:	ce 01       	movw	r24, r28
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <main+0x38>
			ReadSerialMatrixData();			
		}
		_delay_ms(10);
		
		//loop the matrix drawing
		loop();
 42a:	7e de       	rcall	.-772    	; 0x128 <loop>
 42c:	f5 cf       	rjmp	.-22     	; 0x418 <main+0x2a>

	for(;;)
	{
		if(data_in_buffer() != 0)
		{
			ReadSerialMatrixData();			
 42e:	d5 de       	rcall	.-598    	; 0x1da <ReadSerialMatrixData>
 430:	f9 cf       	rjmp	.-14     	; 0x424 <main+0x36>

00000432 <init_usart_rx_buffer>:

//////////////////////////////
//		Buffer Stuff
void init_usart_rx_buffer(void)
{
	UCSR0B |= (1<<RXCIE0);
 432:	e1 ec       	ldi	r30, 0xC1	; 193
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	80 83       	st	Z, r24
	sei();
 43c:	78 94       	sei
}
 43e:	08 95       	ret

00000440 <data_in_buffer>:

unsigned char data_in_buffer(void)
{
	if(rx_buffer_head == rx_buffer_tail)
 440:	90 91 15 01 	lds	r25, 0x0115
 444:	80 91 14 01 	lds	r24, 0x0114
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	98 13       	cpse	r25, r24
 44c:	21 e0       	ldi	r18, 0x01	; 1
	{
		return 0;
	} else {
		return 1;
	}
}
 44e:	82 2f       	mov	r24, r18
 450:	08 95       	ret

00000452 <read_from_buffer>:

unsigned char read_from_buffer(void)
{
	while(rx_buffer_head == rx_buffer_tail) {}
 452:	90 91 15 01 	lds	r25, 0x0115
 456:	80 91 14 01 	lds	r24, 0x0114
 45a:	98 17       	cp	r25, r24
 45c:	d1 f3       	breq	.-12     	; 0x452 <read_from_buffer>
	rx_buffer_tail = (rx_buffer_tail + 1) & rx_buffer_mask;
 45e:	80 91 14 01 	lds	r24, 0x0114
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	8f 73       	andi	r24, 0x3F	; 63
 466:	80 93 14 01 	sts	0x0114, r24
	return rx_buffer[rx_buffer_tail];
 46a:	e0 91 14 01 	lds	r30, 0x0114
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	e9 5e       	subi	r30, 0xE9	; 233
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
}
 476:	08 95       	ret

00000478 <__vector_18>:

ISR(USART_RX_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	if(((rx_buffer_head+1)&rx_buffer_mask) == rx_buffer_tail)
 48e:	80 91 15 01 	lds	r24, 0x0115
 492:	20 91 14 01 	lds	r18, 0x0114
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	8f 73       	andi	r24, 0x3F	; 63
 49c:	90 70       	andi	r25, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	82 17       	cp	r24, r18
 4a2:	93 07       	cpc	r25, r19
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <__vector_18+0x3e>
	{
		rx_buffer_overflow_flag = UDR0;
 4a6:	80 91 c6 00 	lds	r24, 0x00C6
 4aa:	80 93 57 01 	sts	0x0157, r24
		rx_buffer_overflow_flag = 1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 57 01 	sts	0x0157, r24
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__vector_18+0x5a>
	}	else	{
		rx_buffer_head = (rx_buffer_head+1)&rx_buffer_mask;
 4b6:	80 91 15 01 	lds	r24, 0x0115
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	8f 73       	andi	r24, 0x3F	; 63
 4be:	80 93 15 01 	sts	0x0115, r24
		rx_buffer[rx_buffer_head] = UDR0;
 4c2:	e0 91 15 01 	lds	r30, 0x0115
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 91 c6 00 	lds	r24, 0x00C6
 4cc:	e9 5e       	subi	r30, 0xE9	; 233
 4ce:	fe 4f       	sbci	r31, 0xFE	; 254
 4d0:	80 83       	st	Z, r24
	}
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <randomOnOff>:
  for(unsigned char i =0; i < MATRIXBUFFLEN; i++){
    mBuffer[i] = 0;
  }  
}

void randomOnOff(){
 4e8:	1f 93       	push	r17
  int l,c;
  l = random(0,8);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	68 e0       	ldi	r22, 0x08	; 8
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	61 d0       	rcall	.+194    	; 0x5b6 <random>
 4f4:	18 2f       	mov	r17, r24
  c = random(0,8);  
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	68 e0       	ldi	r22, 0x08	; 8
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	5b d0       	rcall	.+182    	; 0x5b6 <random>
  unsigned char b = mBuffer[c];
  b = b ^ _BV(l);
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xb>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	1a 95       	dec	r17
 50c:	e2 f7       	brpl	.-8      	; 0x506 <__stack+0x7>
 50e:	fc 01       	movw	r30, r24
 510:	e8 5a       	subi	r30, 0xA8	; 168
 512:	fe 4f       	sbci	r31, 0xFE	; 254
 514:	80 81       	ld	r24, Z
 516:	82 27       	eor	r24, r18
  mBuffer[c] = b;
 518:	80 83       	st	Z, r24

}
 51a:	1f 91       	pop	r17
 51c:	08 95       	ret

0000051e <do_random>:
 51e:	a0 e0       	ldi	r26, 0x00	; 0
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e4 e9       	ldi	r30, 0x94	; 148
 524:	f2 e0       	ldi	r31, 0x02	; 2
 526:	b8 c0       	rjmp	.+368    	; 0x698 <__prologue_saves__+0x10>
 528:	ec 01       	movw	r28, r24
 52a:	a8 80       	ld	r10, Y
 52c:	b9 80       	ldd	r11, Y+1	; 0x01
 52e:	ca 80       	ldd	r12, Y+2	; 0x02
 530:	db 80       	ldd	r13, Y+3	; 0x03
 532:	a1 14       	cp	r10, r1
 534:	b1 04       	cpc	r11, r1
 536:	c1 04       	cpc	r12, r1
 538:	d1 04       	cpc	r13, r1
 53a:	41 f4       	brne	.+16     	; 0x54c <do_random+0x2e>
 53c:	84 e2       	ldi	r24, 0x24	; 36
 53e:	a8 2e       	mov	r10, r24
 540:	89 ed       	ldi	r24, 0xD9	; 217
 542:	b8 2e       	mov	r11, r24
 544:	8b e5       	ldi	r24, 0x5B	; 91
 546:	c8 2e       	mov	r12, r24
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	d8 2e       	mov	r13, r24
 54c:	c6 01       	movw	r24, r12
 54e:	b5 01       	movw	r22, r10
 550:	2d e1       	ldi	r18, 0x1D	; 29
 552:	33 ef       	ldi	r19, 0xF3	; 243
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	7c d0       	rcall	.+248    	; 0x652 <__divmodsi4>
 55a:	27 ea       	ldi	r18, 0xA7	; 167
 55c:	31 e4       	ldi	r19, 0x41	; 65
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	36 d0       	rcall	.+108    	; 0x5d0 <__mulsi3>
 564:	7b 01       	movw	r14, r22
 566:	8c 01       	movw	r16, r24
 568:	c6 01       	movw	r24, r12
 56a:	b5 01       	movw	r22, r10
 56c:	2d e1       	ldi	r18, 0x1D	; 29
 56e:	33 ef       	ldi	r19, 0xF3	; 243
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	6e d0       	rcall	.+220    	; 0x652 <__divmodsi4>
 576:	ca 01       	movw	r24, r20
 578:	b9 01       	movw	r22, r18
 57a:	2c ee       	ldi	r18, 0xEC	; 236
 57c:	34 ef       	ldi	r19, 0xF4	; 244
 57e:	4f ef       	ldi	r20, 0xFF	; 255
 580:	5f ef       	ldi	r21, 0xFF	; 255
 582:	26 d0       	rcall	.+76     	; 0x5d0 <__mulsi3>
 584:	6e 0d       	add	r22, r14
 586:	7f 1d       	adc	r23, r15
 588:	80 1f       	adc	r24, r16
 58a:	91 1f       	adc	r25, r17
 58c:	97 ff       	sbrs	r25, 7
 58e:	04 c0       	rjmp	.+8      	; 0x598 <do_random+0x7a>
 590:	61 50       	subi	r22, 0x01	; 1
 592:	70 40       	sbci	r23, 0x00	; 0
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	90 48       	sbci	r25, 0x80	; 128
 598:	68 83       	st	Y, r22
 59a:	79 83       	std	Y+1, r23	; 0x01
 59c:	8a 83       	std	Y+2, r24	; 0x02
 59e:	9b 83       	std	Y+3, r25	; 0x03
 5a0:	9b 01       	movw	r18, r22
 5a2:	ac 01       	movw	r20, r24
 5a4:	5f 77       	andi	r21, 0x7F	; 127
 5a6:	b9 01       	movw	r22, r18
 5a8:	ca 01       	movw	r24, r20
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	ea e0       	ldi	r30, 0x0A	; 10
 5b0:	8f c0       	rjmp	.+286    	; 0x6d0 <__epilogue_restores__+0x10>

000005b2 <random_r>:
 5b2:	b5 df       	rcall	.-150    	; 0x51e <do_random>
 5b4:	08 95       	ret

000005b6 <random>:
 5b6:	80 e1       	ldi	r24, 0x10	; 16
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	b1 df       	rcall	.-158    	; 0x51e <do_random>
 5bc:	08 95       	ret

000005be <srandom>:
 5be:	60 93 10 01 	sts	0x0110, r22
 5c2:	70 93 11 01 	sts	0x0111, r23
 5c6:	80 93 12 01 	sts	0x0112, r24
 5ca:	90 93 13 01 	sts	0x0113, r25
 5ce:	08 95       	ret

000005d0 <__mulsi3>:
 5d0:	62 9f       	mul	r22, r18
 5d2:	d0 01       	movw	r26, r0
 5d4:	73 9f       	mul	r23, r19
 5d6:	f0 01       	movw	r30, r0
 5d8:	82 9f       	mul	r24, r18
 5da:	e0 0d       	add	r30, r0
 5dc:	f1 1d       	adc	r31, r1
 5de:	64 9f       	mul	r22, r20
 5e0:	e0 0d       	add	r30, r0
 5e2:	f1 1d       	adc	r31, r1
 5e4:	92 9f       	mul	r25, r18
 5e6:	f0 0d       	add	r31, r0
 5e8:	83 9f       	mul	r24, r19
 5ea:	f0 0d       	add	r31, r0
 5ec:	74 9f       	mul	r23, r20
 5ee:	f0 0d       	add	r31, r0
 5f0:	65 9f       	mul	r22, r21
 5f2:	f0 0d       	add	r31, r0
 5f4:	99 27       	eor	r25, r25
 5f6:	72 9f       	mul	r23, r18
 5f8:	b0 0d       	add	r27, r0
 5fa:	e1 1d       	adc	r30, r1
 5fc:	f9 1f       	adc	r31, r25
 5fe:	63 9f       	mul	r22, r19
 600:	b0 0d       	add	r27, r0
 602:	e1 1d       	adc	r30, r1
 604:	f9 1f       	adc	r31, r25
 606:	bd 01       	movw	r22, r26
 608:	cf 01       	movw	r24, r30
 60a:	11 24       	eor	r1, r1
 60c:	08 95       	ret

0000060e <__udivmodsi4>:
 60e:	a1 e2       	ldi	r26, 0x21	; 33
 610:	1a 2e       	mov	r1, r26
 612:	aa 1b       	sub	r26, r26
 614:	bb 1b       	sub	r27, r27
 616:	fd 01       	movw	r30, r26
 618:	0d c0       	rjmp	.+26     	; 0x634 <__udivmodsi4_ep>

0000061a <__udivmodsi4_loop>:
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	ee 1f       	adc	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	a2 17       	cp	r26, r18
 624:	b3 07       	cpc	r27, r19
 626:	e4 07       	cpc	r30, r20
 628:	f5 07       	cpc	r31, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__udivmodsi4_ep>
 62c:	a2 1b       	sub	r26, r18
 62e:	b3 0b       	sbc	r27, r19
 630:	e4 0b       	sbc	r30, r20
 632:	f5 0b       	sbc	r31, r21

00000634 <__udivmodsi4_ep>:
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	1a 94       	dec	r1
 63e:	69 f7       	brne	.-38     	; 0x61a <__udivmodsi4_loop>
 640:	60 95       	com	r22
 642:	70 95       	com	r23
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	bd 01       	movw	r22, r26
 64e:	cf 01       	movw	r24, r30
 650:	08 95       	ret

00000652 <__divmodsi4>:
 652:	97 fb       	bst	r25, 7
 654:	09 2e       	mov	r0, r25
 656:	05 26       	eor	r0, r21
 658:	0e d0       	rcall	.+28     	; 0x676 <__divmodsi4_neg1>
 65a:	57 fd       	sbrc	r21, 7
 65c:	04 d0       	rcall	.+8      	; 0x666 <__divmodsi4_neg2>
 65e:	d7 df       	rcall	.-82     	; 0x60e <__udivmodsi4>
 660:	0a d0       	rcall	.+20     	; 0x676 <__divmodsi4_neg1>
 662:	00 1c       	adc	r0, r0
 664:	38 f4       	brcc	.+14     	; 0x674 <__divmodsi4_exit>

00000666 <__divmodsi4_neg2>:
 666:	50 95       	com	r21
 668:	40 95       	com	r20
 66a:	30 95       	com	r19
 66c:	21 95       	neg	r18
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	4f 4f       	sbci	r20, 0xFF	; 255
 672:	5f 4f       	sbci	r21, 0xFF	; 255

00000674 <__divmodsi4_exit>:
 674:	08 95       	ret

00000676 <__divmodsi4_neg1>:
 676:	f6 f7       	brtc	.-4      	; 0x674 <__divmodsi4_exit>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	08 95       	ret

00000688 <__prologue_saves__>:
 688:	2f 92       	push	r2
 68a:	3f 92       	push	r3
 68c:	4f 92       	push	r4
 68e:	5f 92       	push	r5
 690:	6f 92       	push	r6
 692:	7f 92       	push	r7
 694:	8f 92       	push	r8
 696:	9f 92       	push	r9
 698:	af 92       	push	r10
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	ca 1b       	sub	r28, r26
 6b2:	db 0b       	sbc	r29, r27
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	09 94       	ijmp

000006c0 <__epilogue_restores__>:
 6c0:	2a 88       	ldd	r2, Y+18	; 0x12
 6c2:	39 88       	ldd	r3, Y+17	; 0x11
 6c4:	48 88       	ldd	r4, Y+16	; 0x10
 6c6:	5f 84       	ldd	r5, Y+15	; 0x0f
 6c8:	6e 84       	ldd	r6, Y+14	; 0x0e
 6ca:	7d 84       	ldd	r7, Y+13	; 0x0d
 6cc:	8c 84       	ldd	r8, Y+12	; 0x0c
 6ce:	9b 84       	ldd	r9, Y+11	; 0x0b
 6d0:	aa 84       	ldd	r10, Y+10	; 0x0a
 6d2:	b9 84       	ldd	r11, Y+9	; 0x09
 6d4:	c8 84       	ldd	r12, Y+8	; 0x08
 6d6:	df 80       	ldd	r13, Y+7	; 0x07
 6d8:	ee 80       	ldd	r14, Y+6	; 0x06
 6da:	fd 80       	ldd	r15, Y+5	; 0x05
 6dc:	0c 81       	ldd	r16, Y+4	; 0x04
 6de:	1b 81       	ldd	r17, Y+3	; 0x03
 6e0:	aa 81       	ldd	r26, Y+2	; 0x02
 6e2:	b9 81       	ldd	r27, Y+1	; 0x01
 6e4:	ce 0f       	add	r28, r30
 6e6:	d1 1d       	adc	r29, r1
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	ed 01       	movw	r28, r26
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
