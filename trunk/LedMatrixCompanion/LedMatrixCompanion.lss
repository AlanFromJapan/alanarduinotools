
LedMatrixCompanion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000464  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000072  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a0  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014f  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00000dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a4 e0       	ldi	r26, 0x04	; 4
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 30       	cpi	r26, 0x0D	; 13
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>

00000050 <__do_copy_data>:
  50:	11 e0       	ldi	r17, 0x01	; 1
  52:	a0 e0       	ldi	r26, 0x00	; 0
  54:	b1 e0       	ldi	r27, 0x01	; 1
  56:	ec ec       	ldi	r30, 0xCC	; 204
  58:	f3 e0       	ldi	r31, 0x03	; 3
  5a:	02 c0       	rjmp	.+4      	; 0x60 <.do_copy_data_start>

0000005c <.do_copy_data_loop>:
  5c:	05 90       	lpm	r0, Z+
  5e:	0d 92       	st	X+, r0

00000060 <.do_copy_data_start>:
  60:	a4 30       	cpi	r26, 0x04	; 4
  62:	b1 07       	cpc	r27, r17
  64:	d9 f7       	brne	.-10     	; 0x5c <.do_copy_data_loop>
  66:	a3 d0       	rcall	.+326    	; 0x1ae <main>
  68:	af c1       	rjmp	.+862    	; 0x3c8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <digitalWrite>:

#define BUFFLEN 8

unsigned char mBuffer[BUFFLEN];

void digitalWrite(unsigned char pPin, unsigned char pValue){
  6c:	38 2f       	mov	r19, r24
	if (pValue == 1) {	
  6e:	61 30       	cpi	r22, 0x01	; 1
  70:	d1 f4       	brne	.+52     	; 0xa6 <digitalWrite+0x3a>
		if (pPin < 8){
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	58 f4       	brcc	.+22     	; 0x8c <digitalWrite+0x20>
			PORTB = PORTB ^ (1 << pPin);
  76:	25 b1       	in	r18, 0x05	; 5
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	02 c0       	rjmp	.+4      	; 0x82 <digitalWrite+0x16>
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	3a 95       	dec	r19
  84:	e2 f7       	brpl	.-8      	; 0x7e <digitalWrite+0x12>
  86:	28 27       	eor	r18, r24
  88:	25 b9       	out	0x05, r18	; 5
  8a:	08 95       	ret
		}
		else
		if (pPin < 16){
  8c:	80 31       	cpi	r24, 0x10	; 16
  8e:	30 f5       	brcc	.+76     	; 0xdc <digitalWrite+0x70>
			PORTC = PORTC ^ (1 << pPin);
  90:	28 b1       	in	r18, 0x08	; 8
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <digitalWrite+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	3a 95       	dec	r19
  9e:	e2 f7       	brpl	.-8      	; 0x98 <digitalWrite+0x2c>
  a0:	28 27       	eor	r18, r24
  a2:	28 b9       	out	0x08, r18	; 8
  a4:	08 95       	ret
		}
	}
	else {
		if (pPin < 8){
  a6:	88 30       	cpi	r24, 0x08	; 8
  a8:	60 f4       	brcc	.+24     	; 0xc2 <digitalWrite+0x56>
			PORTB = PORTB & ~(1 << pPin);
  aa:	25 b1       	in	r18, 0x05	; 5
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <digitalWrite+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	3a 95       	dec	r19
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <digitalWrite+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	85 b9       	out	0x05, r24	; 5
  c0:	08 95       	ret
		}
		else
		if (pPin < 16){
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	58 f4       	brcc	.+22     	; 0xdc <digitalWrite+0x70>
			PORTC = PORTC & ~(1 << pPin);
  c6:	28 b1       	in	r18, 0x08	; 8
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <digitalWrite+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	3a 95       	dec	r19
  d4:	e2 f7       	brpl	.-8      	; 0xce <digitalWrite+0x62>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	88 b9       	out	0x08, r24	; 8
  dc:	08 95       	ret

000000de <setup>:
		}	
	}
}


void setup()   {                
  de:	e5 e0       	ldi	r30, 0x05	; 5
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  for(unsigned char i =0; i < BUFFLEN; i++){
    mBuffer[i] = 0;
  e2:	11 92       	st	Z+, r1
	}
}


void setup()   {                
  for(unsigned char i =0; i < BUFFLEN; i++){
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	ed 30       	cpi	r30, 0x0D	; 13
  e8:	f8 07       	cpc	r31, r24
  ea:	d9 f7       	brne	.-10     	; 0xe2 <setup+0x4>

  for(int i =0; i < 16; i++){
    digitalWrite(i, 1);  
  }  
*/
}
  ec:	08 95       	ret

000000ee <scanLines>:
}

unsigned char mPos = 0;
void scanLines(){
  unsigned char l,c;
  l = mPos / 8;
  ee:	80 91 04 01 	lds	r24, 0x0104
  c = mPos % 8;  
  unsigned char b = mBuffer[c];
  f2:	38 2f       	mov	r19, r24
  f4:	37 70       	andi	r19, 0x07	; 7
  b = b ^ _BV(l);
  f6:	28 2f       	mov	r18, r24
  f8:	26 95       	lsr	r18
  fa:	26 95       	lsr	r18
  fc:	26 95       	lsr	r18
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <scanLines+0x1a>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	2a 95       	dec	r18
 10a:	e2 f7       	brpl	.-8      	; 0x104 <scanLines+0x16>
 10c:	e5 e0       	ldi	r30, 0x05	; 5
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	e3 0f       	add	r30, r19
 112:	f1 1d       	adc	r31, r1
 114:	20 81       	ld	r18, Z
 116:	24 27       	eor	r18, r20
  mBuffer[c] = b;
 118:	20 83       	st	Z, r18

  mPos = (mPos + 1) % 64;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 73       	andi	r24, 0x3F	; 63
 120:	90 70       	andi	r25, 0x00	; 0
 122:	80 93 04 01 	sts	0x0104, r24
}
 126:	08 95       	ret

00000128 <loop>:

void loop()                     
{
	//change the drawing
	//randomOnOff();
	scanLines();
 128:	e2 df       	rcall	.-60     	; 0xee <scanLines>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0

	//draw the in memory image
	for (unsigned char c = 0; c < BUFFLEN; c++){
		PORTD = mBuffer[c];
		PORTB = ~_BV(c);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
		PORTC = (c >= 6 ? ~_BV(c - 6) : 0xFF);
 132:	af ef       	ldi	r26, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	60 ed       	ldi	r22, 0xD0	; 208
 136:	77 e0       	ldi	r23, 0x07	; 7
	//randomOnOff();
	scanLines();

	//draw the in memory image
	for (unsigned char c = 0; c < BUFFLEN; c++){
		PORTD = mBuffer[c];
 138:	f9 01       	movw	r30, r18
 13a:	eb 5f       	subi	r30, 0xFB	; 251
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	80 81       	ld	r24, Z
 140:	8b b9       	out	0x0b, r24	; 11
		PORTB = ~_BV(c);
 142:	ca 01       	movw	r24, r20
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <loop+0x24>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <loop+0x20>
 150:	80 95       	com	r24
 152:	85 b9       	out	0x05, r24	; 5
		PORTC = (c >= 6 ? ~_BV(c - 6) : 0xFF);
 154:	26 30       	cpi	r18, 0x06	; 6
 156:	10 f4       	brcc	.+4      	; 0x15c <loop+0x34>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	0c c0       	rjmp	.+24     	; 0x174 <loop+0x4c>
 15c:	26 50       	subi	r18, 0x06	; 6
 15e:	30 40       	sbci	r19, 0x00	; 0
 160:	ca 01       	movw	r24, r20
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <loop+0x42>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <loop+0x3e>
 16e:	2a 5f       	subi	r18, 0xFA	; 250
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	80 95       	com	r24
 174:	88 b9       	out	0x08, r24	; 8
		PORTC = ~_BV((c & 0x03) << 2);
 176:	c9 01       	movw	r24, r18
 178:	83 70       	andi	r24, 0x03	; 3
 17a:	90 70       	andi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	fa 01       	movw	r30, r20
 186:	02 c0       	rjmp	.+4      	; 0x18c <loop+0x64>
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <loop+0x60>
 190:	cf 01       	movw	r24, r30
 192:	80 95       	com	r24
 194:	88 b9       	out	0x08, r24	; 8
 196:	cb 01       	movw	r24, r22
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <loop+0x70>
		//stay displayed to allow POV
		_delay_us(1000);
		PORTD = 0;
 19c:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0xFF;
 19e:	a5 b9       	out	0x05, r26	; 5
		PORTC = 0xFF;
 1a0:	a8 b9       	out	0x08, r26	; 8
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
	//change the drawing
	//randomOnOff();
	scanLines();

	//draw the in memory image
	for (unsigned char c = 0; c < BUFFLEN; c++){
 1a6:	28 30       	cpi	r18, 0x08	; 8
 1a8:	31 05       	cpc	r19, r1
 1aa:	31 f6       	brne	.-116    	; 0x138 <loop+0x10>
		PORTD = 0;
		PORTB = 0xFF;
		PORTC = 0xFF;
	}

}
 1ac:	08 95       	ret

000001ae <main>:
//
// main function
//
int main(void) {
	//all ports go output 
	DDRB = 0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 1b2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;
 1b4:	8a b9       	out	0x0a, r24	; 10
	
	for (;;) loop();
 1b6:	b8 df       	rcall	.-144    	; 0x128 <loop>
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x8>

000001ba <randomOnOff>:
    digitalWrite(i, 1);  
  }  
*/
}

void randomOnOff(){
 1ba:	1f 93       	push	r17
  int l,c;
  l = random(0,8);
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	68 e0       	ldi	r22, 0x08	; 8
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	61 d0       	rcall	.+194    	; 0x288 <random>
 1c6:	18 2f       	mov	r17, r24
  c = random(0,8);  
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	68 e0       	ldi	r22, 0x08	; 8
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	5b d0       	rcall	.+182    	; 0x288 <random>
  unsigned char b = mBuffer[c];
  b = b ^ _BV(l);
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <randomOnOff+0x22>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	1a 95       	dec	r17
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <randomOnOff+0x1e>
 1e0:	fc 01       	movw	r30, r24
 1e2:	eb 5f       	subi	r30, 0xFB	; 251
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	80 81       	ld	r24, Z
 1e8:	82 27       	eor	r24, r18
  mBuffer[c] = b;
 1ea:	80 83       	st	Z, r24

}
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <do_random>:
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	ed ef       	ldi	r30, 0xFD	; 253
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	96 c0       	rjmp	.+300    	; 0x326 <__prologue_saves__+0x10>
 1fa:	ec 01       	movw	r28, r24
 1fc:	a8 80       	ld	r10, Y
 1fe:	b9 80       	ldd	r11, Y+1	; 0x01
 200:	ca 80       	ldd	r12, Y+2	; 0x02
 202:	db 80       	ldd	r13, Y+3	; 0x03
 204:	a1 14       	cp	r10, r1
 206:	b1 04       	cpc	r11, r1
 208:	c1 04       	cpc	r12, r1
 20a:	d1 04       	cpc	r13, r1
 20c:	41 f4       	brne	.+16     	; 0x21e <do_random+0x2e>
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	a8 2e       	mov	r10, r24
 212:	89 ed       	ldi	r24, 0xD9	; 217
 214:	b8 2e       	mov	r11, r24
 216:	8b e5       	ldi	r24, 0x5B	; 91
 218:	c8 2e       	mov	r12, r24
 21a:	87 e0       	ldi	r24, 0x07	; 7
 21c:	d8 2e       	mov	r13, r24
 21e:	c6 01       	movw	r24, r12
 220:	b5 01       	movw	r22, r10
 222:	2d e1       	ldi	r18, 0x1D	; 29
 224:	33 ef       	ldi	r19, 0xF3	; 243
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	5a d0       	rcall	.+180    	; 0x2e0 <__divmodsi4>
 22c:	27 ea       	ldi	r18, 0xA7	; 167
 22e:	31 e4       	ldi	r19, 0x41	; 65
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	36 d0       	rcall	.+108    	; 0x2a2 <__mulsi3>
 236:	7b 01       	movw	r14, r22
 238:	8c 01       	movw	r16, r24
 23a:	c6 01       	movw	r24, r12
 23c:	b5 01       	movw	r22, r10
 23e:	2d e1       	ldi	r18, 0x1D	; 29
 240:	33 ef       	ldi	r19, 0xF3	; 243
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	4c d0       	rcall	.+152    	; 0x2e0 <__divmodsi4>
 248:	ca 01       	movw	r24, r20
 24a:	b9 01       	movw	r22, r18
 24c:	2c ee       	ldi	r18, 0xEC	; 236
 24e:	34 ef       	ldi	r19, 0xF4	; 244
 250:	4f ef       	ldi	r20, 0xFF	; 255
 252:	5f ef       	ldi	r21, 0xFF	; 255
 254:	26 d0       	rcall	.+76     	; 0x2a2 <__mulsi3>
 256:	6e 0d       	add	r22, r14
 258:	7f 1d       	adc	r23, r15
 25a:	80 1f       	adc	r24, r16
 25c:	91 1f       	adc	r25, r17
 25e:	97 ff       	sbrs	r25, 7
 260:	04 c0       	rjmp	.+8      	; 0x26a <do_random+0x7a>
 262:	61 50       	subi	r22, 0x01	; 1
 264:	70 40       	sbci	r23, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 48       	sbci	r25, 0x80	; 128
 26a:	68 83       	st	Y, r22
 26c:	79 83       	std	Y+1, r23	; 0x01
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	9b 83       	std	Y+3, r25	; 0x03
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	5f 77       	andi	r21, 0x7F	; 127
 278:	b9 01       	movw	r22, r18
 27a:	ca 01       	movw	r24, r20
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	ea e0       	ldi	r30, 0x0A	; 10
 282:	6d c0       	rjmp	.+218    	; 0x35e <__epilogue_restores__+0x10>

00000284 <random_r>:
 284:	b5 df       	rcall	.-150    	; 0x1f0 <do_random>
 286:	08 95       	ret

00000288 <random>:
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	b1 df       	rcall	.-158    	; 0x1f0 <do_random>
 28e:	08 95       	ret

00000290 <srandom>:
 290:	60 93 00 01 	sts	0x0100, r22
 294:	70 93 01 01 	sts	0x0101, r23
 298:	80 93 02 01 	sts	0x0102, r24
 29c:	90 93 03 01 	sts	0x0103, r25
 2a0:	08 95       	ret

000002a2 <__mulsi3>:
 2a2:	62 9f       	mul	r22, r18
 2a4:	d0 01       	movw	r26, r0
 2a6:	73 9f       	mul	r23, r19
 2a8:	f0 01       	movw	r30, r0
 2aa:	82 9f       	mul	r24, r18
 2ac:	e0 0d       	add	r30, r0
 2ae:	f1 1d       	adc	r31, r1
 2b0:	64 9f       	mul	r22, r20
 2b2:	e0 0d       	add	r30, r0
 2b4:	f1 1d       	adc	r31, r1
 2b6:	92 9f       	mul	r25, r18
 2b8:	f0 0d       	add	r31, r0
 2ba:	83 9f       	mul	r24, r19
 2bc:	f0 0d       	add	r31, r0
 2be:	74 9f       	mul	r23, r20
 2c0:	f0 0d       	add	r31, r0
 2c2:	65 9f       	mul	r22, r21
 2c4:	f0 0d       	add	r31, r0
 2c6:	99 27       	eor	r25, r25
 2c8:	72 9f       	mul	r23, r18
 2ca:	b0 0d       	add	r27, r0
 2cc:	e1 1d       	adc	r30, r1
 2ce:	f9 1f       	adc	r31, r25
 2d0:	63 9f       	mul	r22, r19
 2d2:	b0 0d       	add	r27, r0
 2d4:	e1 1d       	adc	r30, r1
 2d6:	f9 1f       	adc	r31, r25
 2d8:	bd 01       	movw	r22, r26
 2da:	cf 01       	movw	r24, r30
 2dc:	11 24       	eor	r1, r1
 2de:	08 95       	ret

000002e0 <__divmodsi4>:
 2e0:	97 fb       	bst	r25, 7
 2e2:	09 2e       	mov	r0, r25
 2e4:	05 26       	eor	r0, r21
 2e6:	0e d0       	rcall	.+28     	; 0x304 <__divmodsi4_neg1>
 2e8:	57 fd       	sbrc	r21, 7
 2ea:	04 d0       	rcall	.+8      	; 0x2f4 <__divmodsi4_neg2>
 2ec:	4b d0       	rcall	.+150    	; 0x384 <__udivmodsi4>
 2ee:	0a d0       	rcall	.+20     	; 0x304 <__divmodsi4_neg1>
 2f0:	00 1c       	adc	r0, r0
 2f2:	38 f4       	brcc	.+14     	; 0x302 <__divmodsi4_exit>

000002f4 <__divmodsi4_neg2>:
 2f4:	50 95       	com	r21
 2f6:	40 95       	com	r20
 2f8:	30 95       	com	r19
 2fa:	21 95       	neg	r18
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
 2fe:	4f 4f       	sbci	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255

00000302 <__divmodsi4_exit>:
 302:	08 95       	ret

00000304 <__divmodsi4_neg1>:
 304:	f6 f7       	brtc	.-4      	; 0x302 <__divmodsi4_exit>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	08 95       	ret

00000316 <__prologue_saves__>:
 316:	2f 92       	push	r2
 318:	3f 92       	push	r3
 31a:	4f 92       	push	r4
 31c:	5f 92       	push	r5
 31e:	6f 92       	push	r6
 320:	7f 92       	push	r7
 322:	8f 92       	push	r8
 324:	9f 92       	push	r9
 326:	af 92       	push	r10
 328:	bf 92       	push	r11
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	ca 1b       	sub	r28, r26
 340:	db 0b       	sbc	r29, r27
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	09 94       	ijmp

0000034e <__epilogue_restores__>:
 34e:	2a 88       	ldd	r2, Y+18	; 0x12
 350:	39 88       	ldd	r3, Y+17	; 0x11
 352:	48 88       	ldd	r4, Y+16	; 0x10
 354:	5f 84       	ldd	r5, Y+15	; 0x0f
 356:	6e 84       	ldd	r6, Y+14	; 0x0e
 358:	7d 84       	ldd	r7, Y+13	; 0x0d
 35a:	8c 84       	ldd	r8, Y+12	; 0x0c
 35c:	9b 84       	ldd	r9, Y+11	; 0x0b
 35e:	aa 84       	ldd	r10, Y+10	; 0x0a
 360:	b9 84       	ldd	r11, Y+9	; 0x09
 362:	c8 84       	ldd	r12, Y+8	; 0x08
 364:	df 80       	ldd	r13, Y+7	; 0x07
 366:	ee 80       	ldd	r14, Y+6	; 0x06
 368:	fd 80       	ldd	r15, Y+5	; 0x05
 36a:	0c 81       	ldd	r16, Y+4	; 0x04
 36c:	1b 81       	ldd	r17, Y+3	; 0x03
 36e:	aa 81       	ldd	r26, Y+2	; 0x02
 370:	b9 81       	ldd	r27, Y+1	; 0x01
 372:	ce 0f       	add	r28, r30
 374:	d1 1d       	adc	r29, r1
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	ed 01       	movw	r28, r26
 382:	08 95       	ret

00000384 <__udivmodsi4>:
 384:	a1 e2       	ldi	r26, 0x21	; 33
 386:	1a 2e       	mov	r1, r26
 388:	aa 1b       	sub	r26, r26
 38a:	bb 1b       	sub	r27, r27
 38c:	fd 01       	movw	r30, r26
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <__udivmodsi4_ep>

00000390 <__udivmodsi4_loop>:
 390:	aa 1f       	adc	r26, r26
 392:	bb 1f       	adc	r27, r27
 394:	ee 1f       	adc	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	a2 17       	cp	r26, r18
 39a:	b3 07       	cpc	r27, r19
 39c:	e4 07       	cpc	r30, r20
 39e:	f5 07       	cpc	r31, r21
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__udivmodsi4_ep>
 3a2:	a2 1b       	sub	r26, r18
 3a4:	b3 0b       	sbc	r27, r19
 3a6:	e4 0b       	sbc	r30, r20
 3a8:	f5 0b       	sbc	r31, r21

000003aa <__udivmodsi4_ep>:
 3aa:	66 1f       	adc	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	1a 94       	dec	r1
 3b4:	69 f7       	brne	.-38     	; 0x390 <__udivmodsi4_loop>
 3b6:	60 95       	com	r22
 3b8:	70 95       	com	r23
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	bd 01       	movw	r22, r26
 3c4:	cf 01       	movw	r24, r30
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
